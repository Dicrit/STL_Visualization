#version 330 core

in vec3 Position_worldspace;
in vec3 Normal_cameraspace;
in vec3 EyeDirection_cameraspace;
in vec3 LightDirection_cameraspace;

out vec3 color;

uniform mat4 MV;
uniform vec3 LightPosition_worldspace;

void main()
{
    // TODO: Make uniforms
    vec3 LightColor = vec3(1, 1, 1);
    float LightPower = 50.0f;

    // Material properties
    vec3 MaterialDiffuseColor = vec3(0.5);
    vec3 MaterialAmbientColor = vec3(0.1) * MaterialDiffuseColor;
    vec3 MaterialSpecularColor = vec3(0.3);

    // Distance to the light
    float light_distance = length(LightPosition_worldspace - Position_worldspace);
    float light_distance_square = light_distance * light_distance;

    vec3 normal = normalize(Normal_cameraspace);
    vec3 light = normalize(LightDirection_cameraspace);

    float cosTheta = clamp(dot(normal, light), 0, 1);

    vec3 Eye = normalize(EyeDirection_cameraspace);

    vec3 LightReflect = reflect(-light, normal);

    float cosAlpha = clamp(dot(Eye, LightReflect), 0, 1);
    
    float diffuse_power = LightPower * cosTheta / light_distance_square;
    float specular_power = LightPower * pow(cosAlpha, 5) / light_distance_square;

    color = MaterialAmbientColor +
        MaterialDiffuseColor * LightColor * diffuse_power +
        MaterialSpecularColor * LightColor * specular_power;

}